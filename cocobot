#DC,距離センサ
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
# GPIOピンの定義(モーター)
motor_pin_1 = 11
motor_pin_2 = 13
motor_pin_3 = 15
motor_pin_4 = 16
GPIO.setup(motor_pin_1, GPIO.OUT)
GPIO.setup(motor_pin_2, GPIO.OUT)
GPIO.setup(motor_pin_3, GPIO.OUT)
GPIO.setup(motor_pin_4, GPIO.OUT)

# GPIOピンの定義(超音波センサ)
Trig = 27                           #変数"Trig"に27を代入
Echo = 18                           #変数"Echo"に18を代入
GPIO.setup(Trig, GPIO.OUT)          #GPIO27を出力モードに設定
GPIO.setup(Echo, GPIO.IN)           #GPIO18を入力モードに設定

#駆動に関する関数
def move_forward():
    GPIO.output(motor_pin_1, GPIO.HIGH)
    GPIO.output(motor_pin_2, GPIO.LOW)
    GPIO.output(motor_pin_3, GPIO.HIGH)
    GPIO.output(motor_pin_4, GPIO.LOW)

def move_turn():
    GPIO.output(motor_pin_1, GPIO.HIGH)
    GPIO.output(motor_pin_2, GPIO.LOW)
    GPIO.output(motor_pin_3, GPIO.LOW)
    GPIO.output(motor_pin_4, GPIO.HIGH)

#HC-SR04で距離を測定する関数
def read_distance():
    GPIO.output(Trig, GPIO.HIGH)            #GPIO27の出力をHigh(3.3V)にする
    time.sleep(0.00001)                     #10μ秒間待つ
    GPIO.output(Trig, GPIO.LOW)             #GPIO27の出力をLow(0V)にする

    while GPIO.input(Echo) == GPIO.LOW:     #GPIO18がLowの時間
        sig_off = time.time()
    while GPIO.input(Echo) == GPIO.HIGH:    #GPIO18がHighの時間
        sig_on = time.time()

    duration = sig_off - sig_on             #GPIO18がHighしている時間を算術
    distance = duration * 34000 / 2         #距離を求める(cm)
    return distance

#連続して値を超音波センサの状態を読み取る
while True:
    try:
        cm = read_distance()                   #HC-SR04で距離を測定する
        if cm > 2 and cm < 400:                #距離が2～400cmの場合
            print("distance=", int(cm), "cm")  #距離をint型で表示
        time.sleep(1)                          #1秒間待つ

    except KeyboardInterrupt:       #Ctrl+Cキーが押された
        GPIO.cleanup()              #GPIOをクリーンアップ
        sys.exit()                  #プログラム終了


#main関数-端末からスクリプトを実行した時のみ
if __name__ == '__main__':
    move_turn()
